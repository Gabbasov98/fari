$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$(".fg select").change(function () {
    $(this).parents(".fg").addClass("_select-changed")
})

$(".burger").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})

$("._toggle-search").click(function () {
    $(".header-search").toggleClass("_open")
})

$(document).mouseup( function(e){
    let div = $( ".header-search" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open")
        }
    }
});

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,

            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
gallery()

$('[name="delivery"]').change(function () {
    let val = $(this).val()
    $(`.delivery-option`).removeClass("_active")
    $(`.delivery-option.${val}`).addClass("_active")
})

let cartItems = []
let products = [
    {
        img: "img/product.webp",
        id: 1,
        price: 6510
    },
    {
        img: "img/product2.webp",
        id: 2,
        price: 5270
    },
]


getCartFromStorage()

function getCartFromStorage(){
    let items = JSON.parse (localStorage.getItem ("cart"));

    if(items){
        cartItems = items
    }
}
function saveCartToStorage(){
    localStorage.setItem("cart", JSON.stringify(cartItems));
}


function removeFromCart(id){
    cartItems = cartItems.filter(el => el.id !== id)
    console.log(cartItems)
    renderCatalogCards()
    saveCartToStorage()
}


function addToCart(id,count){
    cartItems.push({
        id: id,
        count: count
    })
    renderCatalogCards()
    saveCartToStorage()
}


$(".catalog-card__btn").click(function () {
    let id = +$(this).parents(".catalog-card").attr("data-id")
    let isAdded = cartItems.filter(item => item.id === id)

    if(isAdded.length !== 0){
        removeFromCart(id)
    } else{
        addToCart(id,1)
    }
})



function renderCatalogCards() {
    $(".catalog-card").each(function (i,el) {
        let id = +$(this).attr("data-id")
        let isAdded = cartItems.filter(item => item.id === id)
        if(isAdded.length !== 0){
            $(el).find(".catalog-card__btn").addClass("_added")
        } else{
            $(el).find(".catalog-card__btn").removeClass("_added")
        }
    })
}

renderCatalogCards()

renderCart()


function renderCart() {
    if(cartItems.length === 0){
        $(".cart").addClass("_empty")
        return
    }
    $(".cart").removeClass("_empty")


    let addedProducts = []

    cartItems.forEach(cartItem => {
        let product = products.find(item => item.id === cartItem.id)
        product.count = cartItem.count
        if(product){
            addedProducts.push(product)
        }
    })

    let sum = 0

    $(".cart__items").html("")
    addedProducts.forEach(product => {
        sum += product.price * product.count
        $(".cart__items").append(`
        <div class="cart-card" data-id="${product.id}">
            <div class="cart-card__col">
                <div class="cart-card__img">
                    <img src="${product.img}" alt="">
                </div>
            </div>
            <div class="cart-card__col2">
                <div class="cart-card__title text16">
                    <a href="">
                        Противотуманные фары (комплект) Mitsubishi Lancer 9 (2005-2009)
                    </a>
                </div>
            </div>
            <div class="cart-card__col3">
                <div class='cartcalc'>
                    <button class='ccalc-minus'>
                        <svg width="10" height="2" viewBox="0 0 10 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 1H9" stroke="black" stroke-linecap="round"/>
                        </svg>
                    </button>
                    <input type='text' value='${product.count}'>
                    <button class='ccalc-plus'>
                        <svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5 1V5M5 9V5M5 5H1M5 5H9" stroke="black" stroke-linecap="round"/>
                        </svg>
                    </button>
                </div>
                <div class="cart-card__price text18">
                    ${product.price * product.count} ₽
                </div>
                <button class="cart-card__delete">
                    <img src="img/delete.svg" alt="">
                    <span>Удалить</span>
                </button>
            </div>
        </div>
        `)

        $(".cart-card__delete").click(function () {
            removeFromCart(product.id)
            renderCart()
        })

        function cartCalc() {
            $('.cartcalc .ccalc-minus').click(function(e) {
                let a = $(this).closest('.cartcalc').find('input').val();
                if (a > 1) {
                    let b = +a - 1;
                    $(this).closest('.cartcalc').find('input').val(b);
                    $(this).closest('.cartcalc').find('input').trigger('change');
                } else {
                    $(this).closest('.cartcalc').find('input').val(a);
                    removeFromCart(product.id)
                    renderCart()
                }
                e.stopImmediatePropagation()
            });

            $('.cartcalc .ccalc-plus').click(function(e) {
                let a = $(this).closest('.cartcalc').find('input').val();
                let b = +a + 1;
                $(this).closest('.cartcalc').find('input').val(b);
                $(this).closest('.cartcalc').find('input').trigger('change');
                e.stopImmediatePropagation()
            });

            $('.cartcalc input').change(function () {
                let id = +$(this).parents(".cart-card").attr("data-id")
                let val = +$(this).val()


                cartItems.map(item => {
                    if(item.id === id){
                        item.count = val
                    }
                })
                saveCartToStorage()
                renderCart()
            })

        }

        cartCalc()
    })
    $(".cart ._sum").html(sum)



    console.log("addedProducts",addedProducts)
    console.log("sum",sum)

}

let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $(".fg select").niceSelect()
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
